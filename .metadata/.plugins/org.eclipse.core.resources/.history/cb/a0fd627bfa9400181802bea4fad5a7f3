package io.swagger.api;

import io.swagger.model.JsonApiBodyRequest;
import io.swagger.model.JsonApiBodyResponseErrors;
import io.swagger.model.JsonApiBodyResponseSuccess;
import io.swagger.model.RegistrarRequest;
import io.swagger.repository.UserRepository;
import io.swagger.utils.FlagsInformation;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.*;
import javax.validation.Valid;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-25T19:46:33.644Z")

@Controller
public class EliminarApiController implements EliminarApi {

	@Autowired
	UserRepository userRepository;
	
    private static final Logger log = LoggerFactory.getLogger(EliminarApiController.class);

    private final ObjectMapper objectMapper;

    private final HttpServletRequest request;
    
    private FlagsInformation flagsInformation = new FlagsInformation();

    @org.springframework.beans.factory.annotation.Autowired
    public EliminarApiController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }
    
    boolean flag = false;

    public ResponseEntity<?> eliminarIdDelete(@ApiParam(value = "id de la persona a eliminar",required=true) 
    @PathVariable("id") String id) {
        String accept = request.getHeader("Accept");
        JsonApiBodyResponseErrors responseErrors = new JsonApiBodyResponseErrors();
        JsonApiBodyResponseSuccess responseSuccess = new JsonApiBodyResponseSuccess();
        if (accept != null && accept.contains("application/json")) {
            try {
            	RegistrarRequest persona = userRepository.findOne(id);
                if (persona == null) {                       
                      responseErrors.setCodigo(flagsInformation.CODE_1001); 
                      responseErrors.setDetalle(flagsInformation.MSN_CODE_1001);
                      return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
               } else if (persona.getRol().equalsIgnoreCase(flagsInformation.SUPERADMINMASTER)) {
                      responseErrors.setCodigo(flagsInformation.SUPERADMINMASTER_ELIMINAR_ERROR_CODE);
                      responseErrors.setDetalle(flagsInformation.SUPERADMINMASTER_ELIMINAR_MSN);
                      return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
                } else {
                	try {
                		userRepository.delete(id);
                        responseSuccess.setEstado(persona.getEstado());
                        responseSuccess.setId(persona.getId());
                        responseSuccess.setNombre(persona.getNombre());
                        return new ResponseEntity<JsonApiBodyResponseSuccess>(responseSuccess, HttpStatus.OK);
					} catch (Exception e) {
						// TODO: handle exception
						responseErrors.setCodigo(flagsInformation.CODE_5001);
		        		responseErrors.setDetalle(flagsInformation.MSN_CODE_5001);
		        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
					}
                      
                }
				
			} catch (Exception e) {
				// TODO: handle exception
				responseErrors.setCodigo(flagsInformation.CODE_5001);
        		responseErrors.setDetalle(flagsInformation.MSN_CODE_5001);
        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
			}
        			
        }
        return new ResponseEntity<JsonApiBodyRequest>(HttpStatus.NOT_IMPLEMENTED);
    }

}
 