package io.swagger.api;

import io.swagger.model.JsonApiBodyRequest;
import io.swagger.model.JsonApiBodyResponseErrors;
import io.swagger.model.JsonApiBodyResponseSuccess;
import io.swagger.model.RegistrarRequest;
import io.swagger.repository.OfertaRepository;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.*;
import javax.validation.Valid;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-17T21:36:33.675Z")

@Controller
public class ListarApiController implements ListarApi {

	@Autowired
	OfertaRepository ofertaRepository;
	
    private static final Logger log = LoggerFactory.getLogger(ListarApiController.class);

    private final ObjectMapper objectMapper;

    private final HttpServletRequest request;

    @org.springframework.beans.factory.annotation.Autowired
    public ListarApiController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }

    public ResponseEntity<?> listarGet() {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
        	JsonApiBodyResponseErrors responseErrors = new JsonApiBodyResponseErrors();
	    	JsonApiBodyResponseSuccess responseSuccess = new JsonApiBodyResponseSuccess();
        	try {
	        	List<RegistrarRequest> oferta = (List<RegistrarRequest>) ofertaRepository.findAll();
	        	JsonApiBodyRequest body_response = new JsonApiBodyRequest();
				body_response.setOferta(oferta);
				return new ResponseEntity<JsonApiBodyRequest>(body_response, HttpStatus.OK);
    		
		} catch (Exception e) {
			// TODO: handle exception
			responseErrors.setCode("025");
    		responseErrors.setDetalle("NO SE ENCUENTRAN OFERTAS");
    		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
			
		}
        }

        return new ResponseEntity<JsonApiBodyRequest>(HttpStatus.NOT_IMPLEMENTED);
    }

    public ResponseEntity<?> listarIdnegocioIdnegocioGet(@ApiParam(value = "ID del negocio",required=true) 
    @PathVariable("idnegocio") String idnegocio) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
        	JsonApiBodyResponseErrors responseErrors = new JsonApiBodyResponseErrors();
	    	JsonApiBodyResponseSuccess responseSuccess = new JsonApiBodyResponseSuccess();
        	try {
    	        	List<RegistrarRequest> ofertas = (List<RegistrarRequest>) ofertaRepository.findByIdnegocio(idnegocio);
    	        	if (!ofertas.isEmpty()) {
    	        		JsonApiBodyRequest body_response = new JsonApiBodyRequest();
        				body_response.setOferta(ofertas);
        				return new ResponseEntity<JsonApiBodyRequest>(body_response, HttpStatus.OK);
					}else {
						responseErrors.setCode("57");
		        		responseErrors.setDetalle("EL NEGOCIO NO TIENE OFERTAS");
		        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
					}
    	    } catch (Exception e) {
    			// TODO: handle exception
    			responseErrors.setCode("051");
        		responseErrors.setDetalle("NO SE PUDO COMUNICAR CON LA BASE DE DATOS");
        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
    			
    		}
        }

        return new ResponseEntity<JsonApiBodyRequest>(HttpStatus.NOT_IMPLEMENTED);
    }

    public ResponseEntity<?> listarIdofertaGet(@ApiParam(value = "ID de la ofertas",required=true) 
    @PathVariable("idoferta") String idoferta) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
        	JsonApiBodyResponseErrors responseErrors = new JsonApiBodyResponseErrors();
	    	JsonApiBodyResponseSuccess responseSuccess = new JsonApiBodyResponseSuccess();
        	try {
    	        	List<RegistrarRequest> ofertas = (List<RegistrarRequest>) ofertaRepository.findOne(idoferta);
    	        	if (!ofertas.isEmpty()) {
    	        		JsonApiBodyRequest body_response = new JsonApiBodyRequest();
        				body_response.setOferta(ofertas);
        				return new ResponseEntity<JsonApiBodyRequest>(body_response, HttpStatus.OK);
					}else {
						responseErrors.setCode("58");
		        		responseErrors.setDetalle("NO EXISTEN OFERTAS CON ESE ID");
		        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
					}
    	    } catch (Exception e) {
    	    	responseErrors.setCode("051");
        		responseErrors.setDetalle("NO SE PUDO COMUNICAR CON LA BASE DE DATOS");
        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
    			
    		}
        }

        return new ResponseEntity<JsonApiBodyRequest>(HttpStatus.NOT_IMPLEMENTED);
    }

    public ResponseEntity<?> listarProductoProductoGet(@ApiParam(value = "ID de la persona",required=true) 
    @PathVariable("producto") String producto) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
        	JsonApiBodyResponseErrors responseErrors = new JsonApiBodyResponseErrors();
	    	JsonApiBodyResponseSuccess responseSuccess = new JsonApiBodyResponseSuccess();
        	try {
    	        	List<RegistrarRequest> ofertas = (List<RegistrarRequest>) ofertaRepository.findByProducto(producto);
    	        	if (!ofertas.isEmpty()) {
    	        		JsonApiBodyRequest body_response = new JsonApiBodyRequest();
        				body_response.setOferta(ofertas);
        				return new ResponseEntity<JsonApiBodyRequest>(body_response, HttpStatus.OK);
					}else {
						responseErrors.setCode("58");
		        		responseErrors.setDetalle("NO EXISTEN OFERTAS DE ESE PRODUCTO");
		        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
					}
    	    } catch (Exception e) {
    	    	responseErrors.setCode("051");
        		responseErrors.setDetalle("NO SE PUDO COMUNICAR CON LA BASE DE DATOS");
        		return new ResponseEntity<JsonApiBodyResponseErrors>(responseErrors, HttpStatus.FAILED_DEPENDENCY);
    			
    		}
        }

        return new ResponseEntity<JsonApiBodyRequest>(HttpStatus.NOT_IMPLEMENTED);
    }

}
