/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JsonApiBodyRequestNegocio;
import io.swagger.model.JsonApiBodyRequestOfertas;
import io.swagger.model.JsonApiBodyRequestPersona;
import io.swagger.model.JsonApiBodyResponseErrors;
import io.swagger.model.JsonApiBodyResponseErrorsOferta;
import io.swagger.model.JsonApiBodyResponseSuccessNegocio;
import io.swagger.model.JsonApiBodyResponseSuccessOferta;
import io.swagger.model.JsonApiBodyResponseSuccessPersona;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-17T22:23:09.345Z")

@Api(value = "registrar", description = "the registrar API")
public interface RegistrarApi {

    @ApiOperation(value = "Registro negocio", nickname = "registrarNegocioPost", notes = "Registro de negocio", response = JsonApiBodyResponseSuccessNegocio.class, tags={ "servicio", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "NEGOCIO REGISTRADO CORRECTAMENTE.", response = JsonApiBodyResponseSuccessNegocio.class),
        @ApiResponse(code = 400, message = "Datos incompletos o incorrectos.", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/registrar/negocio/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<JsonApiBodyResponseSuccessNegocio> registrarNegocioPost(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody JsonApiBodyRequestNegocio body);


    @ApiOperation(value = "Registro ofertas", nickname = "registrarOfertaPost", notes = "Registro de ofertas", response = JsonApiBodyResponseSuccessOferta.class, tags={ "servicio", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OFERTA REGISTRADA CORRECTAMENTE.", response = JsonApiBodyResponseSuccessOferta.class),
        @ApiResponse(code = 400, message = "Datos incompletos o incorrectos.", response = JsonApiBodyResponseErrorsOferta.class) })
    @RequestMapping(value = "/registrar/oferta/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<JsonApiBodyResponseSuccessOferta> registrarOfertaPost(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody JsonApiBodyRequestOfertas body);


    @ApiOperation(value = "Registro persona", nickname = "registrarPersonaPost", notes = "Registro de persona", response = JsonApiBodyResponseSuccessPersona.class, tags={ "servicio", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "PERSONA REGISTRADA CORRECTAMENTE.", response = JsonApiBodyResponseSuccessPersona.class),
        @ApiResponse(code = 400, message = "Datos incompletos o incorrectos.", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/registrar/persona/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> registrarPersonaPost(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody JsonApiBodyRequestPersona body);

}
